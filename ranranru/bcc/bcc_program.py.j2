import bcc
import ctypes


text = '''
#include <uapi/linux/ptrace.h>
#include <linux/sched.h>

{% for uprobe in uprobes %}

struct data{{ uprobe.idx }}_t {
{{ uprobe.c_data | indent(4, True) }}
};

BPF_PERF_OUTPUT(events{{ uprobe.idx }});
{{ uprobe.c_global }}

void trace{{ uprobe.idx }}(struct pt_regs *ctx) {
    struct data{{ uprobe.idx }}_t data = {};
    {{ uprobe.c_callback | indent(4, True) }}
    events{{ uprobe.idx }}.perf_submit(ctx, &data, sizeof(data));
}

{% endfor %}
'''


b = bcc.BPF(text=text)
{% for uprobe in uprobes %}
b.attach_uprobe(
    name='{{ uprobe.tracee_binary }}',
    addr={{ uprobe.address }},
    fn_name='trace{{ uprobe.idx }}')
{% endfor %}

{% for uprobe in uprobes %}
class Data{{ uprobe.idx }}(ctypes.Structure):
    _fields_ = [
        {{ uprobe.py_data | indent(8, True) }}
    ]

def callback{{ uprobe.idx }}(_, data, __):
    event = ctypes.cast(data, ctypes.POINTER(Data{{ uprobe.idx }})).contents
    {{ uprobe.py_callback | indent(4, True) }}


b["events{{ uprobe.idx }}"].open_perf_buffer(callback{{ uprobe.idx }})


{% endfor %}
print('tracing')
while 1:
    b.perf_buffer_poll()

import bcc
import ctypes
{% for line in bcc_py_imports %}
{{ line }}
{% endfor %}

text = '''
#include <uapi/linux/ptrace.h>
#include <linux/sched.h>
{% for line in bcc_c_headers %}
{{ line }}
{% endfor %}

struct data_t {
{% for line in bcc_c_data_fields %}
    {{ line }}
{% endfor %}
};

BPF_PERF_OUTPUT(events);
{% for line in bcc_c_global %}
{{ line }}
{% endfor %}

void trace0(struct pt_regs *ctx) {
    struct data_t data = {};
    {% for line in bcc_c_func_body %}
    {{ line }}
    {% endfor %}
    events.perf_submit(ctx, &data, sizeof(data));
}
'''


b = bcc.BPF(text=text)
b.attach_uprobe(
    name='{{ tracee_pathname }}',
    sym='{{ uprobe }}',
    fn_name='trace0')


class Data(ctypes.Structure):
    _fields_ = [
        {% for line in bcc_py_data_fields %}
        {{ line }}
        {% endfor %}
    ]


{% for line in bcc_py_global %}
{{ line }}
{% endfor %}


def print_event(_, data, __):
    event = ctypes.cast(data, ctypes.POINTER(Data)).contents
    {% for line in bcc_py_callback_body %}
    {{ line }}
    {% endfor %}
    {{ script }}


print('tracing')
b["events"].open_perf_buffer(print_event)
while 1:
    b.perf_buffer_poll()

